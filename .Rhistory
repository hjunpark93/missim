ifelse(Ethnicity == "European", Conscientiousness + rnorm(1, mean = 0.3, sd = 0.2), Conscientiousness))
Depression <- Depression + 0.6 * Neuroticism + rnorm(1, mean = 0, sd = 1)
Depression <- ifelse(Gender == "Female", Depression + rnorm(1, mean = 0.5, sd = 0.2), Depression)
Self_Harm <- rpois(n, lambda = exp(-3 + 0.5 * Neuroticism - 0.3 * Conscientiousness + 0.2 * Neuroticism * (5 - Conscientiousness)))
Self_Harm <- ifelse(Gender == "Male", Self_Harm + rpois(1, lambda = 0.3), Self_Harm)
data <- data.frame(Gender, Age, Ethnicity, Neuroticism, Conscientiousness, Depression, Self_Harm)
print(data)
cov(data)
write.csv(data, file = "data.csv", row.names = FALSE)
write.csv(data, file = "data.csv", row.names = FALSE)
# 0. Read data ------------------------------------------------------------
data <- read.csv("data.csv", header = TRUE)
data
head(Data)
head(data)
model <- 'Depression ~ 0.4*Neuroticism - 0.6Conscientiousness
Neuroticism ~ 0.9Neuroticism'
prop <- '0.8 ~ 1.0; 0.1;
0.9 ~ 1.0; 0.2'
parse_var <- function(data, model){
if (missing(model)) {
stop("Empty model; please specify a missingness model.")
}
if (!(is.character(model))) {
stop("parse_var() only accepts models in a form of character string.")
}
if (missing(data)) {
stop("No data input; please provide reference data.")
}
parsed.vars <- list()
model.clean <- gsub(" ", "", model, perl = TRUE)
model.clean <- gsub("\\*", "", model.clean, perl = TRUE)
model.clean <- gsub("\t", "", model.clean, perl = TRUE)
model.clean <- gsub(";", "\n", model.clean, fixed = TRUE)
model.clean <- gsub("~", "\t", model.clean, fixed = TRUE)
model.clean <- gsub("=", "\t", model.clean, fixed = TRUE)
model.clean <- gsub("\t{2,}", "\t", model.clean, perl = TRUE)
model.clean <- gsub("\n{2,}", "\n", model.clean, perl = TRUE)
model.inter <- unlist(strsplit(model.clean, "\n"))
if (length(model.inter) == 0) {
stop("Empty model; please specify a missingness model.")
}
for (i in 1:length(model.inter)) {
lhs <- unlist(strsplit(model.inter[i], "\t"))[1]
if (!(lhs %in% colnames(data))) {
stop("A variable in LHS cannot be identified; please remove coefficient or operator if there is any.")
}
rhs <- unlist(strsplit(model.inter[i], "\t"))[2]
var.temp <- unlist(
regmatches(rhs,
gregexpr("[[:alpha:]]+", rhs, perl = TRUE)))
if (!(all(var.temp %in% colnames(data) == TRUE))) {
print(paste("Requires attention: ", var.temp))
stop("A variable in RHS cannot be identified; please check if there is any typo in variable names, or an operator other than + or -.")
}
parsed.vars[[i]] <- c(lhs, var.temp)
}
return(parsed.vars)
}
parse_prop <- function(prop){
if (missing(prop)) {
stop("No specified proportion of missing data.")
}
if (!(is.character(prop))) {
stop("parse_prop() only accepts models in a form of character string.")
}
parsed.prop <- list()
prop.clean <- gsub(" ", "", prop, perl = TRUE)
prop.clean <- gsub("\t", "", prop.clean, perl = TRUE)
prop.clean <- gsub("\n{2,}", "\n", prop.clean, perl = TRUE)
lines <- strsplit(prop.clean, "\n")[[1]]
if (length(lines) == 0) {
stop("Empty proportion specification; please provide valid proportions.")
}
for (i in 1:length(lines)) {
intv.prop <- unlist(strsplit(lines[i], ";"))
if (!(length(intv.prop)==2)){
stop("Intervals and proportions not correctly parsed.")
}
intv <- c()
prp <- c()
intvs <- list()
intvs.mat <- matrix()
intv <- strsplit(intv.prop[1], ",")[[1]]
intvs <- strsplit(trimws(intv), "~")
intvs <- lapply(intvs, as.numeric)
if (any(unlist(intvs) < 0) || any(unlist(intvs) > 1)) {
print(intvs)
stop("Interval values should be between 0 and 1.")
}
if (length(intvs) == 1){
intvs.mat <- matrix(unlist(intvs), ncol = 2, byrow = TRUE)
} else {
for (j in 1:(length(intvs) - 1)) {
for (k in (j + 1):length(intvs)) {
min_j <- min(intvs[[j]])
max_j <- max(intvs[[j]])
min_k <- min(intvs[[k]])
max_k <- max(intvs[[k]])
if (max_j >= min_k && max_k >= min_j) {
print(intvs)
stop("There is an overlap between the intervals.")
}
}
}
intvs.mat <- matrix(unlist(intvs), ncol = 2, byrow = TRUE)
}
prp <- as.numeric(intv.prop[2])
if (prp < 0 || prp > 1) {
print(paste("Proportion value: ", prp))
stop("Proportion values should be between 0 and 1.")
}
intvs.agg <- sum(rowSums(diff(t(intvs.mat))))
tol <- 1e-06
if (prp > intvs.agg + tol) {
print(paste("Proportion value: ", prp))
print(paste("Aggregate interval: ", intvs.agg))
stop("Proportion should not be larger than the aggregate interval.")
}
parsed.prop[[i]] <- list(interval = intvs.mat, proportion = prp)
}
return(parsed.prop)
}
parse_mis <- function(data, model){
if (missing(model)) {
stop("Empty model; please specify a missingness model.")
}
if (!(is.character(model))) {
stop("parse_mis() only accepts models in a form of character string.")
}
if (missing(data)) {
stop("No data input; please provide reference data.")
}
parsed.model <- list()
model.clean <- gsub(" ", "", model, perl = TRUE)
model.clean <- gsub("\\*", "", model.clean, perl = TRUE)
model.clean <- gsub("\t", "", model.clean, perl = TRUE)
model.clean <- gsub(";", "\n", model.clean, fixed = TRUE)
model.clean <- gsub("~", "\t", model.clean, fixed = TRUE)
model.clean <- gsub("=", "\t", model.clean, fixed = TRUE)
model.clean <- gsub("\t{2,}", "\t", model.clean, perl = TRUE)
model.clean <- gsub("\n{2,}", "\n", model.clean, perl = TRUE)
model.inter <- unlist(strsplit(model.clean, "\n"))
if (length(model.inter) == 0) {
stop("Empty model; please specify a missingness model.")
}
for (i in 1:length(model.inter)){
mat.temp <- matrix(nrow = 1)
rownames(mat.temp) <- "coef"
lhs <- c()
rhs <- c()
var.temp <- c()
rhs.temp <- c()
lhs <- unlist(strsplit(model.inter[i], "\t"))[1]
if (!(lhs %in% colnames(data))){
stop("A variable in LHS cannot be identified; please remove coefficient or operator if there is any.")
} else {
mat.temp[1,1] <- as.numeric(1)
colnames(mat.temp)[1] <- paste0("mis_", lhs)
}
rhs <- unlist(strsplit(model.inter[i], "\t"))[2]
var.temp <- unlist(
regmatches(rhs,
gregexpr("[[:alpha:]]+", rhs, perl = TRUE)))
if (!(all(var.temp %in% colnames(data) == TRUE))){
print(paste("Requires attention: ", var.temp))
stop("A variable in RHS cannot be identified; please check if there is any typo in variable names, or an operator other than + or -.")
}
rhs.temp <- unlist(strsplit(rhs,
"(?<!^|[\\s+-])(?=[+-])", perl = TRUE))
for (j in 1:length(rhs.temp)){
temp1 <- c()
temp2 <- c()
temp1 <- regexpr("[[:alpha:]]", rhs.temp[j])
temp2 <- substring(rhs.temp[j],c(0,temp1),c(temp1-1,nchar(rhs.temp[j])))
if (nchar(temp2[1]) == 0 | is.na(temp2[1]) == TRUE){
mat.temp <- cbind(mat.temp, as.numeric(1))
} else if (temp2[1] == "-") {
mat.temp <- cbind(mat.temp, as.numeric(-1))
} else {
mat.temp <- cbind(mat.temp, as.numeric(temp2[1]))
}
colnames(mat.temp)[j+1] <- temp2[2]
}
parsed.model[[i]] <- mat.temp
}
return(parsed.model)
}
mis_list <- function(data, parsed.model, input = "cov"){
if (missing(parsed.model)) {
stop("Empty model; please specify a missingness model.")
}
if (!(is.list(parsed.model))) {
stop("mis_matrix() only accepts models in a list of matrices.")
}
if (missing(data)) {
stop("No data input; please provide reference data.")
}
mis.reference <- list()
if (input == "cor") {
submatrix <- cor(data)
} else if (input == "cov") {
submatrix <- cov(data)
} else {
stop("Invalid input matrix; please specify 'cor' or 'cov'.")
}
for (i in 1:length(parsed.model)){
temp <- parsed.model[[i]]
vec.temp <- colnames(parsed.model[[i]])[2:ncol(parsed.model[[i]])]
mat.temp <- submatrix[vec.temp, vec.temp]
temp1 <- cbind(temp[2:length(temp)], mat.temp)
temp2 <- rbind(temp, temp1)
rownames(temp2) <- colnames(temp2)
if (!(isSymmetric(temp2))){
print(temp2)
stop("The matrix above is not symmetrical. Please check if a variable name or coefficient is not parsed correctly.")
}
ev.check <- eigen(temp2, symmetric = TRUE)$values
if (!all(ev.check >= 0)) {
print(temp2)
stop("Your model generates the above matrix that is not positive-definite.")
}
mis.reference[[i]] <- temp2
}
return(mis.reference)
}
mis_plot <- function(data, var.vector, mis.matrix) {
if (missing(data)) {
stop("No data input; please provide reference data.")
}
if (!identical(dim(data), dim(mis.matrix))) {
stop("The dimensions of data and missingness matrix are not identical.")
}
if (!all(mis.matrix %in% c(0, 1))) {
stop("Missingness matrix must be composed of only 0s and 1s.")
}
if (!is.character(var.vector) || length(var.vector) < 2) {
stop("var.vector must be a character vector with at least two elements(variables).")
}
mis.var <- var.vector[1]
prd.vars <- var.vector[-1]
par(mfrow = c(2, length(prd.vars)))
for (i in seq_along(prd.vars)) {
prd.var <- prd.vars[i]
plot(data[, mis.var], data[, prd.var],
main = paste(mis.var, "vs", prd.var), xlab = prd.var,
type = "h")
plot(data[mis.matrix[, mis.var] == 1, mis.var], data[mis.matrix[, mis.var] == 1, prd.var],
main = paste(mis.var, "vs", prd.var, "(Missing Values)"), xlab = prd.var,
type = "h")
}
}
mis_prop <- function(data, model, prop, input = "cov"){
if (missing(model)) {
stop("Empty model; please specify a missingness model.")
}
if (!(is.character(model))) {
stop("parse_mis() only accepts models in a form of character string.")
}
if (any(is.na(data))) {
stop("Input data is incomplete; mis_prop() only accepts complete data.")
}
if (missing(data)) {
stop("No data input; please provide reference data.")
}
if (missing(prop)) {
stop("No specified proportion of missing data.")
}
if (!(is.character(prop))) {
stop("parse_prop() only accepts models in a form of character string.")
}
parsed.model <- parse_mis(data = data, model = model)
parsed.prop <- parse_prop(prop)
parsed.vars <- parse_var(data = data, model = model)
mis.matrix <- matrix(0, nrow = nrow(data), ncol = ncol(data))
colnames(mis.matrix) <- colnames(data)
if (input == "cor") {
mis.list <- mis_list(parsed.model = parsed.model, data = data,
input = "cor")
mis.vectors <- matrix(nrow = nrow(data), ncol = length(mis.list))
colnames(mis.vectors) <- sapply(mis.list, function(x) colnames(x)[1])
for (i in 1:length(mis.list)){
mis.function <- mis.list[[i]][1,-1]
mis.predictor.name <- c()
mis.predictor <- matrix()
mis.indicator.name <- colnames(mis.list[[i]])[1]
mis.indicator <- c()
mis.var.name <- parsed.vars[[i]][1]
mis.temp <- c()
mis.predictor.name <- colnames(mis.list[[i]])[-1]
mis.predictor <- scale(as.matrix(data[, mis.predictor.name]),
center = TRUE, scale = FALSE)
mis.predictor.s <- scale(as.matrix(data[, mis.predictor.name]),
center = TRUE, scale = TRUE)
mis.temp <- matrix(data[,mis.var.name])
res <- residuals(lm(mis.temp ~ mis.predictor))
temp <- svd(mis.predictor.s)
if (length(mis.function) == 0){
stop("Missingness model not recognized; please check whether the model is correctly parsed.")
} else if (length(mis.function) == 1) {
dual <- (nrow(mis.predictor)-1)*temp$u %*% as.matrix(ifelse(temp$d > 0, 1/temp$d, 0)) %*% t(temp$v)
sigma.2 <- c((1 - mis.function %*% cov(dual) %*% mis.function) / var(res))
} else {
dual <- (nrow(mis.predictor)-1)*temp$u %*% diag(ifelse(temp$d > 0, 1/temp$d, 0)) %*% t(temp$v)
sigma.2 <- c((1 - mis.function %*% cov(dual) %*% mis.function) / var(res))
}
mis.indicator <- dual %*% mis.function + sqrt(sigma.2)*res
mis.vectors[,i] <- mis.indicator
}
} else if (input == "cov") {
mis.list <- mis_list(parsed.model = parsed.model, data = data,
input = "cov")
mis.vectors <- matrix(nrow = nrow(data), ncol = length(mis.list))
colnames(mis.vectors) <- sapply(mis.list, function(x) colnames(x)[1])
for (i in 1:length(mis.list)){
mis.function <- mis.list[[i]][1,-1]
mis.predictor.name <- c()
mis.predictor <- matrix()
mis.indicator.name <- colnames(mis.list[[i]])[1]
mis.indicator <- c()
mis.var.name <- parsed.vars[[i]][1]
mis.temp <- c()
mis.predictor.name <- colnames(mis.list[[i]])[-1]
mis.predictor <- scale(as.matrix(data[, mis.predictor.name]),
center = TRUE, scale = FALSE)
mis.temp <- matrix(data[,mis.var.name])
res <- residuals(lm(mis.temp ~ mis.predictor))
temp <- svd(mis.predictor)
if (length(mis.function) == 0){
stop("Missingness model not recognized; please check whether the model is correctly parsed.")
} else if (length(mis.function) == 1) {
dual <- (nrow(mis.predictor)-1)*temp$u %*% as.matrix(ifelse(temp$d > 0, 1/temp$d, 0)) %*% t(temp$v)
sigma.2 <- c((1 - mis.function %*% cov(dual) %*% mis.function) / var(res))
} else {
dual <- (nrow(mis.predictor)-1)*temp$u %*% diag(ifelse(temp$d > 0, 1/temp$d, 0)) %*% t(temp$v)
sigma.2 <- c((1 - mis.function %*% cov(dual) %*% mis.function) / var(res))
}
mis.indicator <- dual %*% mis.function + sqrt(sigma.2)*res
mis.vectors[,i] <- mis.indicator
}
} else {
stop("Invalid input matrix; please specify 'cor' or 'cov'.")
}
if (!(ncol(mis.vectors) == length(parsed.prop))){
stop("The number of missing variables and the number of variables with specified proportions do not match.")
}
missing <- select_prop(mis.vectors, parsed.prop)
mis.match <- match(sub("^mis_", "", colnames(missing)), colnames(mis.matrix))
mis.matrix[, mis.match] <- missing
return(mis.matrix)
}
mis_sim <- function(data, mis.matrix) {
mis.temp <- data
mis.temp[mis.matrix == 1] <- NA
mis.vars <- colnames(data)[colSums(mis.matrix) > 0]
original_means <- colMeans(data[, mis.vars], na.rm = TRUE)
original_sds <- apply(data[, mis.vars], 2, sd, na.rm = TRUE)
original_cov <- cov(data[, mis.vars], use = "pairwise.complete.obs")
listwise_data <- na.omit(mis.temp)
listwise_means <- colMeans(listwise_data[, mis.vars])
listwise_sds <- apply(listwise_data[, mis.vars], 2, sd)
listwise_cov <- cov(listwise_data[, mis.vars])
pairwise_means <- colMeans(mis.temp[, mis.vars], na.rm = TRUE)
pairwise_sds <- apply(mis.temp[, mis.vars], 2, sd, na.rm = TRUE)
pairwise_cov <- cov(mis.temp[, mis.vars], use = "pairwise.complete.obs")
mean_imputed_data <- mis.temp
for (var in mis.vars) {
mean_imputed_data[is.na(mean_imputed_data[, var]), var] <- mean(mean_imputed_data[, var], na.rm = TRUE)
}
mean_imputed_means <- colMeans(mean_imputed_data[, mis.vars])
mean_imputed_sds <- apply(mean_imputed_data[, mis.vars], 2, sd)
mean_imputed_cov <- cov(mean_imputed_data[, mis.vars])
library(mice)
regression_imputed_data <- mice(mis.temp, method = "norm.predict", m = 1, maxit = 1)
regression_imputed_data <- complete(regression_imputed_data)
regression_imputed_means <- colMeans(regression_imputed_data[, mis.vars])
regression_imputed_sds <- apply(regression_imputed_data[, mis.vars], 2, sd)
regression_imputed_cov <- cov(regression_imputed_data[, mis.vars])
library(mvnmle)
ml_estimates <- mlest(mis.temp[, mis.vars], method = "mvn")
ml_means <- ml_estimates$mu
ml_sds <- sqrt(diag(ml_estimates$sigma))
ml_cov <- ml_estimates$sigma
library(mice)
imputed_data <- mice(mis.temp, method = "pmm", m = 5, maxit = 5)
imputed_means <- apply(imputed_data$imp, 2, function(x) mean(colMeans(x[, mis.vars])))
imputed_sds <- apply(imputed_data$imp, 2, function(x) mean(apply(x[, mis.vars], 2, sd)))
imputed_cov <- apply(imputed_data$imp, 1, function(x) cov(x[, mis.vars]))
imputed_cov <- Reduce("+", imputed_cov) / length(imputed_cov)
frobenius_norm <- function(cov1, cov2) {
sqrt(sum((cov1 - cov2)^2))
}
listwise_frobenius <- frobenius_norm(original_cov, listwise_cov)
pairwise_frobenius <- frobenius_norm(original_cov, pairwise_cov)
mean_imputed_frobenius <- frobenius_norm(original_cov, mean_imputed_cov)
regression_imputed_frobenius <- frobenius_norm(original_cov, regression_imputed_cov)
ml_frobenius <- frobenius_norm(original_cov, ml_cov)
imputed_frobenius <- frobenius_norm(original_cov, imputed_cov)
summary_table <- data.frame(
Method = c("Original", "Listwise Deletion", "Pairwise Deletion", "Mean Imputation",
"Regression Imputation", "Maximum Likelihood", "Multiple Imputation"),
matrix(c(original_means, original_sds,
listwise_means, listwise_sds,
pairwise_means, pairwise_sds,
mean_imputed_means, mean_imputed_sds,
regression_imputed_means, regression_imputed_sds,
ml_means, ml_sds,
imputed_means, imputed_sds), ncol = 2 * length(mis.vars), byrow = TRUE),
Frobenius_Norm = c(NA, listwise_frobenius, pairwise_frobenius, mean_imputed_frobenius,
regression_imputed_frobenius, ml_frobenius, imputed_frobenius)
)
colnames(summary_table)[-c(1, ncol(summary_table))] <- rep(mis.vars, each = 2)
colnames(summary_table)[seq(2, 2 * length(mis.vars), 2)] <-
paste(colnames(summary_table)[seq(2, 2 * length(mis.vars), 2)], "_Mean")
colnames(summary_table)[seq(3, 2 * length(mis.vars) + 1, 2)] <-
paste(colnames(summary_table)[seq(3, 2 * length(mis.vars) + 1, 2)], "_SD")
return(summary_table)
}
parsed.model_check <- parse_mis(data = data, model = model)
parsed.model_check
parsed.vars_check <- parse_var(data = data, model = model)
parsed.vars_check
parsed.vars_check
parsed.prop_check <- parse_prop(prop = prop)
prop <- '0.8 ~ 1.0; 0.1;
0.9 ~ 1.0; 0.1'
parsed.prop_check <- parse_prop(prop = prop)
parsed.prop_check
mis.list_check <- mis_list(data = data, parsed.model = parsed.model_check,
input = "cov")
head(data)
data <- data[,-3]
head(data)
mis.list_check <- mis_list(data = data, parsed.model = parsed.model_check,
input = "cov")
# 0. Read data ------------------------------------------------------------
data <- read.csv("data.csv", header = TRUE)
numeric.columns <- c("Age", "Neuroticism", "Conscientiousness", "Depression", "Self_Harm")
data <- data[,numeric.columns] # Without categorical variable
head(data)
# 1. Specify models -------------------------------------------------------
model <- 'Depression ~ 0.4*Neuroticism - 0.6Conscientiousness
Neuroticism ~ 0.9Neuroticism'
prop <- '0.8 ~ 1.0; 0.1;
0.9 ~ 1.0; 0.1'
parsed.model_check <- parse_mis(data = data, model = model)
parsed.vars_check <- parse_var(data = data, model = model)
parsed.prop_check <- parse_prop(prop = prop)
mis.list_check <- mis_list(data = data, parsed.model = parsed.model_check,
input = "cov")
mis.list_check
mis.list_check
mis.prop_check <- mis_prop(data, model, prop, input = "cov")
select_prop <- function(mis.vectors, parsed.prop){
missing <- matrix(0, nrow = nrow(mis.vectors), ncol = ncol(mis.vectors))
colnames(missing) <- colnames(mis.vectors)
for (i in 1:ncol(mis.vectors)) {
intvs <- parsed.prop[[i]]$interval
prp <- parsed.prop[[i]]$proportion
intvs.sort <- intvs[order(intvs[, 1]), ]
intvs.agg <- sum(abs(diff(intvs.sort)))
if (intvs.agg > prp) {
select <- logical(nrow(mis.vectors))
if (is.null(nrow(intvs.sort))) {
lower <- intvs.sort[1]
upper <- intvs.sort[2]
percent <- quantile(mis.vectors[, i], c(lower, upper))
indices <- which(mis.vectors[, i] > percent[1] & mis.vectors[, i] < percent[2])
select[indices] <- TRUE
} else {
for (j in 1:nrow(intvs.sort)) {
lower <- intvs.sort[j, 1]
upper <- intvs.sort[j, 2]
percent <- quantile(mis.vectors[, i], c(lower, upper))
index <- which(mis.vectors[, i] > percent[1] & mis.vectors[, i] < percent[2])
select[index] <- TRUE
}
}
target <- round(prp * nrow(mis.vectors))
if (sum(select) > target) {
select[sample(which(select), sum(select) - target)] <- FALSE
}
missing[select, i] <- 1
} else {
if (is.null(nrow(intvs.sort))) {
lower <- intvs.sort[1]
upper <- intvs.sort[2]
percent <- quantile(mis.vectors[, i], c(lower, upper))
indices <- which(mis.vectors[, i] > percent[1] & mis.vectors[, i] < percent[2])
missing[indices, i] <- 1
} else {
for (j in 1:nrow(intvs.sort)) {
lower <- intvs.sort[j, 1]
upper <- intvs.sort[j, 2]
percent <- quantile(mis.vectors[, i], c(lower, upper))
indices <- which(mis.vectors[, i] >= percent[1] & mis.vectors[, i] <= percent[2])
missing[indices, i] <- 1
}
}
}
}
return(missing)
}
mis.prop_check <- mis_prop(data, model, prop, input = "cov")
mis.prop_check
check.vector <- c('Depression', 'Neuroticism')
mis_plot(data = data, var.vector = check.vector, mis.matrix = mis.prop_check)
mis_plot(data = data, var.vector = check.vector, mis.matrix = mis.prop_check)
mis_plot(data = data, var.vector = check.vector, mis.matrix = mis.prop_check)
mis_plot(data = data, var.vector = check.vector, mis.matrix = mis.prop_check)
check.vector <- c('Neuroticism', 'Neuroticism')
mis_plot(data = data, var.vector = check.vector, mis.matrix = mis.prop_check)
